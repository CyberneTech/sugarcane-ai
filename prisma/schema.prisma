// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// console.log(`database url ${env("DATABASE_URL")}`);
datasource db {
  // provider = "sqlite"
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// LabelledState enum-like values
enum LabelledState {
  UNLABELLED
  SELECTED
  REJECTED
  NOTSURE
}

// FinetunedState enum-like values
enum FinetunedState {
  UNPROCESSED
  PROCESSED
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PromptDataset {
  id Int @id @default(autoincrement())

  projectId  String
  workflowId String
  traceId    String

  chatId String

  //   Prompt
  promptPackage  PromptPackage  @relation(fields: [promptPackageId], references: [id])
  promptTemplate PromptTemplate @relation(fields: [promptTemplateId], references: [id])
  promptVersion  PromptVersion  @relation(fields: [promptVersionId], references: [id])

  promptPackageId  String
  promptTemplateId String
  promptVersionId  String

  prompt     String
  completion String

  duration       Decimal        @map("duration") // Numeric(precision=10, scale=5)
  llmProvider    String
  llmPodel       String
  cmetadata      Json           @db.JsonB
  labelledState  LabelledState  @map("labelled_state")
  finetunedState FinetunedState @map("finetuned_state")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model PromptPackage {
  id     String @id @default(cuid())
  userId String

  name        String
  description String

  templates     PromptTemplate[]
  datasets      PromptDataset[]
  User          User             @relation(fields: [userId], references: [id])
  PromptVersion PromptVersion[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, name])
}

model PromptTemplate {
  id              String @id @default(cuid())
  userId          String
  promptPackageId String

  name        String
  description String

  previewVersion   PromptVersion? @relation("previewVersion", map: "previewVersion", fields: [previewVersionId], references: [id])
  previewVersionId String?        @unique
  releaseVersion   PromptVersion? @relation("releaseVersion", map: "releaseVersion", fields: [releaseVersionId], references: [id])
  releaseVersionId String?        @unique

  versions      PromptVersion[] @relation("template")
  dataset       PromptDataset[]
  promptPackage PromptPackage   @relation(fields: [promptPackageId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([promptPackageId, name])
}

model PromptVersion {
  id     String @id @default(cuid())
  userId String

  // Definition
  version        String
  template       String
  inputFields    String[]
  templateFields String[]
  changelog      String?

  // LLM Interoperability
  llmProvider String
  llmModel    String
  llmConfig   Json   @db.JsonB

  // Features
  lang String[]

  // Dataset
  dataset PromptDataset[]

  // Evaluated
  outAccuracy Float?
  outLatency  Float?
  outCost     Float?

  // Managed States
  // state

  user           User            @relation(fields: [userId], references: [id])
  releaseVersion PromptTemplate? @relation("releaseVersion", map: "releaseVersion")
  previewVersion PromptTemplate? @relation("previewVersion", map: "previewVersion")
  promptPackage  PromptPackage   @relation(fields: [promptPackageId], references: [id])
  promptTemplate PromptTemplate  @relation("template", fields: [promptTemplateId], references: [id])

  promptPackageId  String
  promptTemplateId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  @@unique([promptPackageId, promptTemplateId, version])
  
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  promptPackages PromptPackage[]
  PromptVersion  PromptVersion[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
